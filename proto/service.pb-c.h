/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: service.proto */

#ifndef PROTOBUF_C_service_2eproto__INCLUDED
#define PROTOBUF_C_service_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Room Room;
typedef struct _Sensor Sensor;
typedef struct _SynTime SynTime;
typedef struct _ResponseCode ResponseCode;
typedef struct _Config Config;
typedef struct _ConfigList ConfigList;
typedef struct _Controller Controller;
typedef struct _SensorData SensorData;
typedef struct _Ping Ping;
typedef struct _RoomConf RoomConf;
typedef struct _Init Init;


/* --- enums --- */

typedef enum _Controller__STATE {
  CONTROLLER__STATE__CLOSE = 0,
  CONTROLLER__STATE__OPEN = 1,
  CONTROLLER__STATE__ERROR = -1
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(CONTROLLER__STATE)
} Controller__STATE;
typedef enum _SENSORTYPE {
  SENSOR__TYPE__TEMP = 1,
  SENSOR__TYPE__LIGHT = 2,
  SENSOR__TYPE__HUMI = 3,
  SENSOR__TYPE__CO2 = 4
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(SENSOR__TYPE)
} SENSORTYPE;
typedef enum _CONTROLLERTYPE {
  CONTROLLER__TYPE__XUNHUAN_FAN = 1,
  CONTROLLER__TYPE__JINFENG_FAN = 2,
  CONTROLLER__TYPE__PAIFENG_FAN = 3,
  CONTROLLER__TYPE__JIASHIQI = 4,
  CONTROLLER__TYPE__YASUOJI = 5,
  CONTROLLER__TYPE__NEIJI = 6,
  CONTROLLER__TYPE__YELLO_LIGHT = 7,
  CONTROLLER__TYPE__RED_LIGHT = 8,
  CONTROLLER__TYPE__BLUE_LIGHT = 9
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(CONTROLLER__TYPE)
} CONTROLLERTYPE;
typedef enum _MESSAGEID {
  MESSAGE__ID__READ_TIME = 1,
  MESSAGE__ID__READ_TIME_RESPONSE = 2,
  MESSAGE__ID__UPDATE_TIME = 3,
  MESSAGE__ID__UPDATE_TIME_RESPONSE = 4,
  MESSAGE__ID__READ_CONF = 5,
  MESSAGE__ID__READ_CONF_RESPONSE = 6,
  MESSAGE__ID__UPDATE_CONF = 7,
  MESSAGE__ID__UPDATE_CONF_RESPONSE = 8,
  MESSAGE__ID__REBOOT = 9,
  MESSAGE__ID__REBOOT_RESPONSE = 10,
  MESSAGE__ID__READ_CONTROLLER_STATE = 1001,
  MESSAGE__ID__READ_CONTROLLER_STATE_RESPONSE = 1002,
  MESSAGE__ID__UPDATE_CONTROLLER_STATE = 1003,
  MESSAGE__ID__UPDATE_CONTROLLER_STATE_RESPONSE = 1004,
  MESSAGE__ID__READ_SENSOR_DATA = 2001,
  MESSAGE__ID__READ_SENSOR_DATA_RESPONSE = 2002,
  MESSAGE__ID__SENSOR_DATA_PUSH = 2003,
  MESSAGE__ID__PING = 3001,
  MESSAGE__ID__INIT = 3002
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(MESSAGE__ID)
} MESSAGEID;
typedef enum _RESPONSE {
  RESPONSE__OK = 0,
  RESPONSE__ERROR = -1
    _PROTOBUF_C_FORCE_ENUM_TO_BE_INT_SIZE(RESPONSE)
} RESPONSE;

/* --- messages --- */

struct  _Room
{
  ProtobufCMessage base;
  int32_t room_id;
};
#define ROOM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&room__descriptor) \
    , 0 }


struct  _Sensor
{
  ProtobufCMessage base;
  int32_t id;
  protobuf_c_boolean has_type;
  SENSORTYPE type;
  protobuf_c_boolean has_value;
  int32_t value;
};
#define SENSOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensor__descriptor) \
    , 0, 0,0, 0,0 }


struct  _SynTime
{
  ProtobufCMessage base;
  char *timestamp;
};
#define SYN_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&syn_time__descriptor) \
    , NULL }


struct  _ResponseCode
{
  ProtobufCMessage base;
  RESPONSE code;
  char *log;
};
#define RESPONSE_CODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&response_code__descriptor) \
    , 0, NULL }


struct  _Config
{
  ProtobufCMessage base;
  char *key;
  protobuf_c_boolean has_val;
  int32_t val;
};
#define CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config__descriptor) \
    , NULL, 0,0 }


struct  _ConfigList
{
  ProtobufCMessage base;
  size_t n_config;
  Config **config;
};
#define CONFIG_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&config_list__descriptor) \
    , 0,NULL }


struct  _Controller
{
  ProtobufCMessage base;
  int32_t controller_id;
  protobuf_c_boolean has_state;
  Controller__STATE state;
  protobuf_c_boolean has_type;
  CONTROLLERTYPE type;
};
#define CONTROLLER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&controller__descriptor) \
    , 0, 0,0, 0,0 }


struct  _SensorData
{
  ProtobufCMessage base;
  int32_t room_id;
  size_t n_sensor;
  Sensor **sensor;
  SynTime *time;
};
#define SENSOR_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&sensor_data__descriptor) \
    , 0, 0,NULL, NULL }


struct  _Ping
{
  ProtobufCMessage base;
  char *src;
  char *echo;
};
#define PING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ping__descriptor) \
    , NULL, NULL }


struct  _RoomConf
{
  ProtobufCMessage base;
  int32_t id;
  size_t n_sensor;
  Sensor **sensor;
  size_t n_controller;
  Controller **controller;
};
#define ROOM_CONF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&room_conf__descriptor) \
    , 0, 0,NULL, 0,NULL }


struct  _Init
{
  ProtobufCMessage base;
  size_t n_roomconf;
  RoomConf **roomconf;
  size_t n_config;
  Config **config;
};
#define INIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&init__descriptor) \
    , 0,NULL, 0,NULL }


/* Room methods */
void   room__init
                     (Room         *message);
size_t room__get_packed_size
                     (const Room   *message);
size_t room__pack
                     (const Room   *message,
                      uint8_t             *out);
size_t room__pack_to_buffer
                     (const Room   *message,
                      ProtobufCBuffer     *buffer);
Room *
       room__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   room__free_unpacked
                     (Room *message,
                      ProtobufCAllocator *allocator);
/* Sensor methods */
void   sensor__init
                     (Sensor         *message);
size_t sensor__get_packed_size
                     (const Sensor   *message);
size_t sensor__pack
                     (const Sensor   *message,
                      uint8_t             *out);
size_t sensor__pack_to_buffer
                     (const Sensor   *message,
                      ProtobufCBuffer     *buffer);
Sensor *
       sensor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensor__free_unpacked
                     (Sensor *message,
                      ProtobufCAllocator *allocator);
/* SynTime methods */
void   syn_time__init
                     (SynTime         *message);
size_t syn_time__get_packed_size
                     (const SynTime   *message);
size_t syn_time__pack
                     (const SynTime   *message,
                      uint8_t             *out);
size_t syn_time__pack_to_buffer
                     (const SynTime   *message,
                      ProtobufCBuffer     *buffer);
SynTime *
       syn_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   syn_time__free_unpacked
                     (SynTime *message,
                      ProtobufCAllocator *allocator);
/* ResponseCode methods */
void   response_code__init
                     (ResponseCode         *message);
size_t response_code__get_packed_size
                     (const ResponseCode   *message);
size_t response_code__pack
                     (const ResponseCode   *message,
                      uint8_t             *out);
size_t response_code__pack_to_buffer
                     (const ResponseCode   *message,
                      ProtobufCBuffer     *buffer);
ResponseCode *
       response_code__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   response_code__free_unpacked
                     (ResponseCode *message,
                      ProtobufCAllocator *allocator);
/* Config methods */
void   config__init
                     (Config         *message);
size_t config__get_packed_size
                     (const Config   *message);
size_t config__pack
                     (const Config   *message,
                      uint8_t             *out);
size_t config__pack_to_buffer
                     (const Config   *message,
                      ProtobufCBuffer     *buffer);
Config *
       config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config__free_unpacked
                     (Config *message,
                      ProtobufCAllocator *allocator);
/* ConfigList methods */
void   config_list__init
                     (ConfigList         *message);
size_t config_list__get_packed_size
                     (const ConfigList   *message);
size_t config_list__pack
                     (const ConfigList   *message,
                      uint8_t             *out);
size_t config_list__pack_to_buffer
                     (const ConfigList   *message,
                      ProtobufCBuffer     *buffer);
ConfigList *
       config_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   config_list__free_unpacked
                     (ConfigList *message,
                      ProtobufCAllocator *allocator);
/* Controller methods */
void   controller__init
                     (Controller         *message);
size_t controller__get_packed_size
                     (const Controller   *message);
size_t controller__pack
                     (const Controller   *message,
                      uint8_t             *out);
size_t controller__pack_to_buffer
                     (const Controller   *message,
                      ProtobufCBuffer     *buffer);
Controller *
       controller__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   controller__free_unpacked
                     (Controller *message,
                      ProtobufCAllocator *allocator);
/* SensorData methods */
void   sensor_data__init
                     (SensorData         *message);
size_t sensor_data__get_packed_size
                     (const SensorData   *message);
size_t sensor_data__pack
                     (const SensorData   *message,
                      uint8_t             *out);
size_t sensor_data__pack_to_buffer
                     (const SensorData   *message,
                      ProtobufCBuffer     *buffer);
SensorData *
       sensor_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   sensor_data__free_unpacked
                     (SensorData *message,
                      ProtobufCAllocator *allocator);
/* Ping methods */
void   ping__init
                     (Ping         *message);
size_t ping__get_packed_size
                     (const Ping   *message);
size_t ping__pack
                     (const Ping   *message,
                      uint8_t             *out);
size_t ping__pack_to_buffer
                     (const Ping   *message,
                      ProtobufCBuffer     *buffer);
Ping *
       ping__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ping__free_unpacked
                     (Ping *message,
                      ProtobufCAllocator *allocator);
/* RoomConf methods */
void   room_conf__init
                     (RoomConf         *message);
size_t room_conf__get_packed_size
                     (const RoomConf   *message);
size_t room_conf__pack
                     (const RoomConf   *message,
                      uint8_t             *out);
size_t room_conf__pack_to_buffer
                     (const RoomConf   *message,
                      ProtobufCBuffer     *buffer);
RoomConf *
       room_conf__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   room_conf__free_unpacked
                     (RoomConf *message,
                      ProtobufCAllocator *allocator);
/* Init methods */
void   init__init
                     (Init         *message);
size_t init__get_packed_size
                     (const Init   *message);
size_t init__pack
                     (const Init   *message,
                      uint8_t             *out);
size_t init__pack_to_buffer
                     (const Init   *message,
                      ProtobufCBuffer     *buffer);
Init *
       init__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   init__free_unpacked
                     (Init *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Room_Closure)
                 (const Room *message,
                  void *closure_data);
typedef void (*Sensor_Closure)
                 (const Sensor *message,
                  void *closure_data);
typedef void (*SynTime_Closure)
                 (const SynTime *message,
                  void *closure_data);
typedef void (*ResponseCode_Closure)
                 (const ResponseCode *message,
                  void *closure_data);
typedef void (*Config_Closure)
                 (const Config *message,
                  void *closure_data);
typedef void (*ConfigList_Closure)
                 (const ConfigList *message,
                  void *closure_data);
typedef void (*Controller_Closure)
                 (const Controller *message,
                  void *closure_data);
typedef void (*SensorData_Closure)
                 (const SensorData *message,
                  void *closure_data);
typedef void (*Ping_Closure)
                 (const Ping *message,
                  void *closure_data);
typedef void (*RoomConf_Closure)
                 (const RoomConf *message,
                  void *closure_data);
typedef void (*Init_Closure)
                 (const Init *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    sensor__type__descriptor;
extern const ProtobufCEnumDescriptor    controller__type__descriptor;
extern const ProtobufCEnumDescriptor    message__id__descriptor;
extern const ProtobufCEnumDescriptor    response__descriptor;
extern const ProtobufCMessageDescriptor room__descriptor;
extern const ProtobufCMessageDescriptor sensor__descriptor;
extern const ProtobufCMessageDescriptor syn_time__descriptor;
extern const ProtobufCMessageDescriptor response_code__descriptor;
extern const ProtobufCMessageDescriptor config__descriptor;
extern const ProtobufCMessageDescriptor config_list__descriptor;
extern const ProtobufCMessageDescriptor controller__descriptor;
extern const ProtobufCEnumDescriptor    controller__state__descriptor;
extern const ProtobufCMessageDescriptor sensor_data__descriptor;
extern const ProtobufCMessageDescriptor ping__descriptor;
extern const ProtobufCMessageDescriptor room_conf__descriptor;
extern const ProtobufCMessageDescriptor init__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_service_2eproto__INCLUDED */
